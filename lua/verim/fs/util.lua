return {
    EACCES = [[Write permission is denied for the directory containing oldpath or newpath, or, search permission is denied for one of the directories in the path prefix of oldpath or newpath, or oldpath is a directory and does not allow write permission (needed to update the ..  entry).  (See also path_resolution(7).)]],
    EBUSY = [[The rename fails because oldpath or newpath is a directory that is in use by some process (perhaps as current working directory, or as root directory, or because it was open for reading) or is in use by the system (for example as mount point), while the system considers this an error.  (Note that there is no requirement to return EBUSY in such cases—there is nothing wrong with doing the rename anyway—but it is allowed to return EBUSY if the system cannot otherwise handle such situations.)]],
    EDQUOT = [[The user's quota of disk blocks on the filesystem has been exhausted.]],
    EFAULT = [[oldpath or newpath points outside your accessible address space.]],
    EINVAL = [[The new pathname contained a path prefix of the old, or, more generally, an attempt was made to make a directory a subdirectory of itself.]],
    EISDIR = [[newpath is an existing directory, but oldpath is not a directory.]],
    ELOOP = [[Too many symbolic links were encountered in resolving oldpath or newpath.]],
    EMLINK = [[oldpath already has the maximum number of links to it, or it was a directory and the directory containing newpath has the maximum number of links.]],
    ENAMETOOLONG = [[oldpath or newpath was too long.]],
    ENOENT = [[ The link named by oldpath does not exist; or, a directory component in newpath does not exist; or, oldpath or newpath is an empty string.]],
    ENOMEM = [[Insufficient kernel memory was available.]],
    ENOSPC = [[The device containing the file has no room for the new directory entry.]],
    ENOTDIR = [[ A component used as a directory in oldpath or newpath is not, in fact, a directory.  Or, oldpath is a directory, and newpath exists but is not a directory.]],
    ENOTEMPTY = [[newpath is a nonempty directory, that is, contains entries other than "." and "..".]],
    EEXIST =[[newpath is a nonempty directory, that is, contains entries other than "." and "..".]],
    EPERM = [[The directory containing oldpath has the sticky bit (S_ISVTX) set and the process's effective user ID is neither the user ID of the file to be deleted nor that of the directory containing it, and the process is not privileged (Linux: does not have the CAP_FOWNER capability); or newpath is an existing file and the directory containing it has the sticky bit set and the process's effective user ID is neither the user ID of the file to be replaced nor that of the directory containing it, and the process is not privileged (Linux: does not have the CAP_FOWNER capability); or the filesystem containing pathname does not support renaming of the type requested.]],
    EROFS = [[The file is on a read-only filesystem.]],
    EXDEV = [[oldpath and newpath are not on the same mounted filesystem.  (Linux permits a filesystem to be mounted at multiple points, but rename() does not work across different mount points, even if the same filesystem is mounted on both.)]],
}
